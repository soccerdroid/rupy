# This file contains the PEG grammar definition that
# Treetop uses to generate our parser.
#
# For more information check out the Treetop site:
# http://treetop.rubyforge.org/


grammar Sexp

  rule expression
    (forLoop / printFunction / writeFile /splitCollection / stripCollection / declareVar) space? newLine* <Expression>
  end


  rule forLoop
    'for' space? word space? 'in' space? word space? ':' newLine ([\t] expression)+ <ForLoop>
  end

  rule declareVar
   space? word space? '=' space? (callFunction / value)
  end

  rule printFunction
    'print' space? parenthesized_letter
  end
 
  rule callFunction
     splitCollection / stripCollection / openFile / word space? '(' space? ( value space? (',' space? value space? )*)? ')'
  end
  
  rule parenthesized_letter
    '(' parenthesized_letter ')'
    /
    (value/callFunction) (',' parenthesized_letter)*
  end

    
  rule splitCollection
    word '.split' space? '(' (string / word) ')' 
  end
  
  rule stripCollection
    word '.strip' space? '()'

  end
  rule openFile
    'open' space? '(' ( word / string ) space? ( ',' ( ('"' / '\'') ( 'r' / 'w' / 'a' / 'r+' / 'w+' / 'a+' ) ) )? space? ')' <File>
  end
    
  rule writeFile
    word '.write' space? '(' (string / word) ')' 
  end

  rule value
    word / string / integer / float
  end

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end
  
  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+)) <FloatLiteral>
  end

  rule space
    [\s]+
  end

  rule string
    '"' ([^"\\] / "\\" . )* '"' <StringLiteral>
  end

  rule newLine
    [\n]+
  end


  rule word
      [a-zA-Z]+ [0-9]* [a-zA-Z]* <Variable>
  end
  
end